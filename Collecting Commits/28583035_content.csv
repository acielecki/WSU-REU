path,type,content
.gitignore,blob,"b'# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n'"
LICENSE,blob,"b'The MIT License (MIT)\n\nCopyright (c) 2014 Miguel Grinberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the ""Software""), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n'"
README.md,blob,"b'Using Celery with Flask\n=======================\n\nThis repository contains the example code for my blog article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n\nThe application provides two examples of background tasks using Celery:\n\n- Example 1 sends emails asynchronously.\n- Example 2 launches one or more asynchronous jobs and shows progress updates in the web page.\n\nHere is a screenshot of this application:\n\n<center><img src=""http://blog.miguelgrinberg.com/static/images/flask-celery.png""></center>\n\nQuick Setup\n-----------\n\n1. Clone this repository.\n2. Create a virtualenv and install the requirements.\n3. Open a second terminal window and start a local Redis server (if you are on Linux or Mac, execute `run-redis.sh` to install and launch a private copy).\n4. Open a third terminal window. Set two environment variables `MAIL_USERNAME` and `MAIL_PASSWORD` to a valid Gmail account credentials (these will be used to send test emails). Then start a Celery worker: `venv/bin/celery worker -A app.celery --loglevel=info`.\n5. Start the Flask application on your original terminal window: `venv/bin/python app.py`.\n6. Go to `http://localhost:5000/` and enjoy this application!\n\nFor details on how this all works, see my article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n'"
app.py,blob,"b'import os\nimport random\nimport time\nfrom flask import Flask, request, render_template, session, flash, redirect, \\\n    url_for, jsonify\nfrom flask_mail import Mail, Message\nfrom celery import Celery\n\n\napp = Flask(__name__)\napp.config[\'SECRET_KEY\'] = \'top-secret!\'\n\n# Flask-Mail configuration\napp.config[\'MAIL_SERVER\'] = \'smtp.googlemail.com\'\napp.config[\'MAIL_PORT\'] = 587\napp.config[\'MAIL_USE_TLS\'] = True\napp.config[\'MAIL_USERNAME\'] = os.environ.get(\'MAIL_USERNAME\')\napp.config[\'MAIL_PASSWORD\'] = os.environ.get(\'MAIL_PASSWORD\')\napp.config[\'MAIL_DEFAULT_SENDER\'] = \'flask@example.com\'\n\n# Celery configuration\napp.config[\'CELERY_BROKER_URL\'] = \'redis://localhost:6379/0\'\napp.config[\'CELERY_RESULT_BACKEND\'] = \'redis://localhost:6379/0\'\n\n\n# Initialize extensions\nmail = Mail(app)\n\n# Initialize Celery\ncelery = Celery(app.name, broker=app.config[\'CELERY_BROKER_URL\'])\ncelery.conf.update(app.config)\n\n\n@celery.task\ndef send_async_email(email_data):\n    """"""Background task to send an email with Flask-Mail.""""""\n    msg = Message(email_data[\'subject\'],\n                  sender=app.config[\'MAIL_DEFAULT_SENDER\'],\n                  recipients=[email_data[\'to\']])\n    msg.body = email_data[\'body\']\n    with app.app_context():\n        mail.send(msg)\n\n\n@celery.task(bind=True)\ndef long_task(self):\n    """"""Background task that runs a long function with progress reports.""""""\n    verb = [\'Starting up\', \'Booting\', \'Repairing\', \'Loading\', \'Checking\']\n    adjective = [\'master\', \'radiant\', \'silent\', \'harmonic\', \'fast\']\n    noun = [\'solar array\', \'particle reshaper\', \'cosmic ray\', \'orbiter\', \'bit\']\n    message = \'\'\n    total = random.randint(10, 50)\n    for i in range(total):\n        if not message or random.random() < 0.25:\n            message = \'{0} {1} {2}...\'.format(random.choice(verb),\n                                              random.choice(adjective),\n                                              random.choice(noun))\n        self.update_state(state=\'PROGRESS\',\n                          meta={\'current\': i, \'total\': total,\n                                \'status\': message})\n        time.sleep(1)\n    return {\'current\': 100, \'total\': 100, \'status\': \'Task completed!\',\n            \'result\': 42}\n\n\n@app.route(\'/\', methods=[\'GET\', \'POST\'])\ndef index():\n    if request.method == \'GET\':\n        return render_template(\'index.html\', email=session.get(\'email\', \'\'))\n    email = request.form[\'email\']\n    session[\'email\'] = email\n\n    # send the email\n    email_data = {\n        \'subject\': \'Hello from Flask\',\n        \'to\': email,\n        \'body\': \'This is a test email sent from a background Celery task.\'\n    }\n    if request.form[\'submit\'] == \'Send\':\n        # send right away\n        send_async_email.delay(email_data)\n        flash(\'Sending email to {0}\'.format(email))\n    else:\n        # send in one minute\n        send_async_email.apply_async(args=[email_data], countdown=60)\n        flash(\'An email will be sent to {0} in one minute\'.format(email))\n\n    return redirect(url_for(\'index\'))\n\n\n@app.route(\'/longtask\', methods=[\'POST\'])\ndef longtask():\n    task = long_task.apply_async()\n    return jsonify({}), 202, {\'Location\': url_for(\'taskstatus\',\n                                                  task_id=task.id)}\n\n\n@app.route(\'/status/<task_id>\')\ndef taskstatus(task_id):\n    task = long_task.AsyncResult(task_id)\n    if task.state == \'PENDING\':\n        response = {\n            \'state\': task.state,\n            \'current\': 0,\n            \'total\': 1,\n            \'status\': \'Pending...\'\n        }\n    elif task.state != \'FAILURE\':\n        response = {\n            \'state\': task.state,\n            \'current\': task.info.get(\'current\', 0),\n            \'total\': task.info.get(\'total\', 1),\n            \'status\': task.info.get(\'status\', \'\')\n        }\n        if \'result\' in task.info:\n            response[\'result\'] = task.info[\'result\']\n    else:\n        # something went wrong in the background job\n        response = {\n            \'state\': task.state,\n            \'current\': 1,\n            \'total\': 1,\n            \'status\': str(task.info),  # this is the exception raised\n        }\n    return jsonify(response)\n\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n'"
requirements.txt,blob,b'amqp==2.5.2\nbilliard==3.6.3.0\nblinker==1.4\ncelery==4.4.1\nClick==7.0\nFlask==1.1.1\nFlask-Mail==0.9.1\nitsdangerous==1.1.0\nJinja2==2.10.1\nkombu==4.6.8\nMarkupSafe==1.1.1\npytz==2019.1\nredis==3.4.1\nvine==1.3.0\nWerkzeug==1.0.0\n'
run-redis.sh,blob,b'#!/bin/bash\nif [ ! -d redis-stable/src ]; then\n    curl -O http://download.redis.io/redis-stable.tar.gz\n    tar xvzf redis-stable.tar.gz\n    rm redis-stable.tar.gz\nfi\ncd redis-stable\nmake\nsrc/redis-server\n'
index.html,blob,"b'<html>\n  <head>\n    <title>Flask + Celery Examples</title>\n    <style>\n        .progress {\n            width: 100%;\n            text-align: center;\n        }\n    </style>\n  </head>\n  <body>\n    <h1>Flask + Celery Examples</h1>\n    <h2>Example 1: Send Asynchronous Email</h2>\n    {% for message in get_flashed_messages() %}\n    <p style=""color: red;"">{{ message }}</p>\n    {% endfor %}\n    <form method=""POST"">\n      <p>Send test email to: <input type=""text"" name=""email"" value=""{{ email }}""></p>\n      <input type=""submit"" name=""submit"" value=""Send"">\n      <input type=""submit"" name=""submit"" value=""Send in 1 minute"">\n    </form>\n    <hr>\n    <h2>Example 2: Long running task with progress updates</h2>\n    <!--<button onclick=""start_long_task();"">Start Long Calculation</button><br><br>-->\n    <button id=""start-bg-job"">Start Long Calculation</button><br><br>\n    <div id=""progress""></div>\n\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/nanobar/0.2.1/nanobar.min.js""></script>\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js""></script>\n    <script>\n        function start_long_task() {\n            // add task status elements\n            div = $(\'<div class=""progress""><div></div><div>0%</div><div>...</div><div>&nbsp;</div></div><hr>\');\n            $(\'#progress\').append(div);\n\n            // create a progress bar\n            var nanobar = new Nanobar({\n                bg: \'#44f\',\n                target: div[0].childNodes[0]\n            });\n\n            // send ajax POST request to start background job\n            $.ajax({\n                type: \'POST\',\n                url: \'/longtask\',\n                success: function(data, status, request) {\n                    status_url = request.getResponseHeader(\'Location\');\n                    update_progress(status_url, nanobar, div[0]);\n                },\n                error: function() {\n                    alert(\'Unexpected error\');\n                }\n            });\n        }\n        function update_progress(status_url, nanobar, status_div) {\n            // send GET request to status URL\n            $.getJSON(status_url, function(data) {\n                // update UI\n                percent = parseInt(data[\'current\'] * 100 / data[\'total\']);\n                nanobar.go(percent);\n                $(status_div.childNodes[1]).text(percent + \'%\');\n                $(status_div.childNodes[2]).text(data[\'status\']);\n                if (data[\'state\'] != \'PENDING\' && data[\'state\'] != \'PROGRESS\') {\n                    if (\'result\' in data) {\n                        // show result\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'result\']);\n                    }\n                    else {\n                        // something unexpected happened\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'state\']);\n                    }\n                }\n                else {\n                    // rerun in 2 seconds\n                    setTimeout(function() {\n                        update_progress(status_url, nanobar, status_div);\n                    }, 2000);\n                }\n            });\n        }\n        $(function() {\n            $(\'#start-bg-job\').click(start_long_task);\n        });\n    </script>\n  </body>\n</html>\n'"
.gitignore,blob,"b'# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n'"
LICENSE,blob,"b'The MIT License (MIT)\n\nCopyright (c) 2014 Miguel Grinberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the ""Software""), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n'"
README.md,blob,"b'Using Celery with Flask\n=======================\n\nThis repository contains the example code for my blog article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n\nThe application provides two examples of background tasks using Celery:\n\n- Example 1 sends emails asynchronously.\n- Example 2 launches one or more asynchronous jobs and shows progress updates in the web page.\n\nHere is a screenshot of this application:\n\n<center><img src=""http://blog.miguelgrinberg.com/static/images/flask-celery.png""></center>\n\nQuick Setup\n-----------\n\n1. Clone this repository.\n2. Create a virtualenv and install the requirements.\n3. Open a second terminal window and start a local Redis server (if you are on Linux or Mac, execute `run-redis.sh` to install and launch a private copy).\n4. Open a third terminal window. Set two environment variables `MAIL_USERNAME` and `MAIL_PASSWORD` to a valid Gmail account credentials (these will be used to send test emails). Then start a Celery worker: `venv/bin/celery worker -A app.celery --loglevel=info`.\n5. Start the Flask application on your original terminal window: `venv/bin/python app.py`.\n6. Go to `http://localhost:5000/` and enjoy this application!\n\nFor details on how this all works, see my article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n'"
app.py,blob,"b'import os\nimport random\nimport time\nfrom flask import Flask, request, render_template, session, flash, redirect, \\\n    url_for, jsonify\nfrom flask_mail import Mail, Message\nfrom celery import Celery\n\n\napp = Flask(__name__)\napp.config[\'SECRET_KEY\'] = \'top-secret!\'\n\n# Flask-Mail configuration\napp.config[\'MAIL_SERVER\'] = \'smtp.googlemail.com\'\napp.config[\'MAIL_PORT\'] = 587\napp.config[\'MAIL_USE_TLS\'] = True\napp.config[\'MAIL_USERNAME\'] = os.environ.get(\'MAIL_USERNAME\')\napp.config[\'MAIL_PASSWORD\'] = os.environ.get(\'MAIL_PASSWORD\')\napp.config[\'MAIL_DEFAULT_SENDER\'] = \'flask@example.com\'\n\n# Celery configuration\napp.config[\'CELERY_BROKER_URL\'] = \'redis://localhost:6379/0\'\napp.config[\'CELERY_RESULT_BACKEND\'] = \'redis://localhost:6379/0\'\n\n\n# Initialize extensions\nmail = Mail(app)\n\n# Initialize Celery\ncelery = Celery(app.name, broker=app.config[\'CELERY_BROKER_URL\'])\ncelery.conf.update(app.config)\n\n\n@celery.task\ndef send_async_email(email_data):\n    """"""Background task to send an email with Flask-Mail.""""""\n    msg = Message(email_data[\'subject\'],\n                  sender=app.config[\'MAIL_DEFAULT_SENDER\'],\n                  recipients=[email_data[\'to\']])\n    msg.body = email_data[\'body\']\n    with app.app_context():\n        mail.send(msg)\n\n\n@celery.task(bind=True)\ndef long_task(self):\n    """"""Background task that runs a long function with progress reports.""""""\n    verb = [\'Starting up\', \'Booting\', \'Repairing\', \'Loading\', \'Checking\']\n    adjective = [\'master\', \'radiant\', \'silent\', \'harmonic\', \'fast\']\n    noun = [\'solar array\', \'particle reshaper\', \'cosmic ray\', \'orbiter\', \'bit\']\n    message = \'\'\n    total = random.randint(10, 50)\n    for i in range(total):\n        if not message or random.random() < 0.25:\n            message = \'{0} {1} {2}...\'.format(random.choice(verb),\n                                              random.choice(adjective),\n                                              random.choice(noun))\n        self.update_state(state=\'PROGRESS\',\n                          meta={\'current\': i, \'total\': total,\n                                \'status\': message})\n        time.sleep(1)\n    return {\'current\': 100, \'total\': 100, \'status\': \'Task completed!\',\n            \'result\': 42}\n\n\n@app.route(\'/\', methods=[\'GET\', \'POST\'])\ndef index():\n    if request.method == \'GET\':\n        return render_template(\'index.html\', email=session.get(\'email\', \'\'))\n    email = request.form[\'email\']\n    session[\'email\'] = email\n\n    # send the email\n    email_data = {\n        \'subject\': \'Hello from Flask\',\n        \'to\': email,\n        \'body\': \'This is a test email sent from a background Celery task.\'\n    }\n    if request.form[\'submit\'] == \'Send\':\n        # send right away\n        send_async_email.delay(email_data)\n        flash(\'Sending email to {0}\'.format(email))\n    else:\n        # send in one minute\n        send_async_email.apply_async(args=[email_data], countdown=60)\n        flash(\'An email will be sent to {0} in one minute\'.format(email))\n\n    return redirect(url_for(\'index\'))\n\n\n@app.route(\'/longtask\', methods=[\'POST\'])\ndef longtask():\n    task = long_task.apply_async()\n    return jsonify({}), 202, {\'Location\': url_for(\'taskstatus\',\n                                                  task_id=task.id)}\n\n\n@app.route(\'/status/<task_id>\')\ndef taskstatus(task_id):\n    task = long_task.AsyncResult(task_id)\n    if task.state == \'PENDING\':\n        response = {\n            \'state\': task.state,\n            \'current\': 0,\n            \'total\': 1,\n            \'status\': \'Pending...\'\n        }\n    elif task.state != \'FAILURE\':\n        response = {\n            \'state\': task.state,\n            \'current\': task.info.get(\'current\', 0),\n            \'total\': task.info.get(\'total\', 1),\n            \'status\': task.info.get(\'status\', \'\')\n        }\n        if \'result\' in task.info:\n            response[\'result\'] = task.info[\'result\']\n    else:\n        # something went wrong in the background job\n        response = {\n            \'state\': task.state,\n            \'current\': 1,\n            \'total\': 1,\n            \'status\': str(task.info),  # this is the exception raised\n        }\n    return jsonify(response)\n\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n'"
requirements.txt,blob,b'amqp==2.5.0\nbilliard==3.6.0.0\nblinker==1.4\ncelery==4.3.0\nClick==7.0\nFlask==1.0.3\nFlask-Mail==0.9.1\nitsdangerous==1.1.0\nJinja2==2.10.1\nkombu==4.6.0\nMarkupSafe==1.1.1\npytz==2019.1\nredis==3.2.1\nvine==1.3.0\nWerkzeug==0.15.4\n'
run-redis.sh,blob,b'#!/bin/bash\nif [ ! -d redis-stable/src ]; then\n    curl -O http://download.redis.io/redis-stable.tar.gz\n    tar xvzf redis-stable.tar.gz\n    rm redis-stable.tar.gz\nfi\ncd redis-stable\nmake\nsrc/redis-server\n'
index.html,blob,"b'<html>\n  <head>\n    <title>Flask + Celery Examples</title>\n    <style>\n        .progress {\n            width: 100%;\n            text-align: center;\n        }\n    </style>\n  </head>\n  <body>\n    <h1>Flask + Celery Examples</h1>\n    <h2>Example 1: Send Asynchronous Email</h2>\n    {% for message in get_flashed_messages() %}\n    <p style=""color: red;"">{{ message }}</p>\n    {% endfor %}\n    <form method=""POST"">\n      <p>Send test email to: <input type=""text"" name=""email"" value=""{{ email }}""></p>\n      <input type=""submit"" name=""submit"" value=""Send"">\n      <input type=""submit"" name=""submit"" value=""Send in 1 minute"">\n    </form>\n    <hr>\n    <h2>Example 2: Long running task with progress updates</h2>\n    <!--<button onclick=""start_long_task();"">Start Long Calculation</button><br><br>-->\n    <button id=""start-bg-job"">Start Long Calculation</button><br><br>\n    <div id=""progress""></div>\n\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/nanobar/0.2.1/nanobar.min.js""></script>\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js""></script>\n    <script>\n        function start_long_task() {\n            // add task status elements\n            div = $(\'<div class=""progress""><div></div><div>0%</div><div>...</div><div>&nbsp;</div></div><hr>\');\n            $(\'#progress\').append(div);\n\n            // create a progress bar\n            var nanobar = new Nanobar({\n                bg: \'#44f\',\n                target: div[0].childNodes[0]\n            });\n\n            // send ajax POST request to start background job\n            $.ajax({\n                type: \'POST\',\n                url: \'/longtask\',\n                success: function(data, status, request) {\n                    status_url = request.getResponseHeader(\'Location\');\n                    update_progress(status_url, nanobar, div[0]);\n                },\n                error: function() {\n                    alert(\'Unexpected error\');\n                }\n            });\n        }\n        function update_progress(status_url, nanobar, status_div) {\n            // send GET request to status URL\n            $.getJSON(status_url, function(data) {\n                // update UI\n                percent = parseInt(data[\'current\'] * 100 / data[\'total\']);\n                nanobar.go(percent);\n                $(status_div.childNodes[1]).text(percent + \'%\');\n                $(status_div.childNodes[2]).text(data[\'status\']);\n                if (data[\'state\'] != \'PENDING\' && data[\'state\'] != \'PROGRESS\') {\n                    if (\'result\' in data) {\n                        // show result\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'result\']);\n                    }\n                    else {\n                        // something unexpected happened\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'state\']);\n                    }\n                }\n                else {\n                    // rerun in 2 seconds\n                    setTimeout(function() {\n                        update_progress(status_url, nanobar, status_div);\n                    }, 2000);\n                }\n            });\n        }\n        $(function() {\n            $(\'#start-bg-job\').click(start_long_task);\n        });\n    </script>\n  </body>\n</html>\n'"
.gitignore,blob,"b'# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n'"
LICENSE,blob,"b'The MIT License (MIT)\n\nCopyright (c) 2014 Miguel Grinberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the ""Software""), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n'"
README.md,blob,"b'Using Celery with Flask\n=======================\n\nThis repository contains the example code for my blog article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n\nThe application provides two examples of background tasks using Celery:\n\n- Example 1 sends emails asynchronously.\n- Example 2 launches one or more asynchronous jobs and shows progress updates in the web page.\n\nHere is a screenshot of this application:\n\n<center><img src=""http://blog.miguelgrinberg.com/static/images/flask-celery.png""></center>\n\nQuick Setup\n-----------\n\n1. Clone this repository.\n2. Create a virtualenv and install the requirements.\n3. Open a second terminal window and start a local Redis server (if you are on Linux or Mac, execute `run-redis.sh` to install and launch a private copy).\n4. Open a third terminal window. Set two environment variables `MAIL_USERNAME` and `MAIL_PASSWORD` to a valid Gmail account credentials (these will be used to send test emails). Then start a Celery worker: `venv/bin/celery worker -A app.celery --loglevel=info`.\n5. Start the Flask application on your original terminal window: `venv/bin/python app.py`.\n6. Go to `http://localhost:5000/` and enjoy this application!\n\nFor details on how this all works, see my article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n'"
app.py,blob,"b'import os\nimport random\nimport time\nfrom flask import Flask, request, render_template, session, flash, redirect, \\\n    url_for, jsonify\nfrom flask_mail import Mail, Message\nfrom celery import Celery\n\n\napp = Flask(__name__)\napp.config[\'SECRET_KEY\'] = \'top-secret!\'\n\n# Flask-Mail configuration\napp.config[\'MAIL_SERVER\'] = \'smtp.googlemail.com\'\napp.config[\'MAIL_PORT\'] = 587\napp.config[\'MAIL_USE_TLS\'] = True\napp.config[\'MAIL_USERNAME\'] = os.environ.get(\'MAIL_USERNAME\')\napp.config[\'MAIL_PASSWORD\'] = os.environ.get(\'MAIL_PASSWORD\')\napp.config[\'MAIL_DEFAULT_SENDER\'] = \'flask@example.com\'\n\n# Celery configuration\napp.config[\'CELERY_BROKER_URL\'] = \'redis://localhost:6379/0\'\napp.config[\'CELERY_RESULT_BACKEND\'] = \'redis://localhost:6379/0\'\n\n\n# Initialize extensions\nmail = Mail(app)\n\n# Initialize Celery\ncelery = Celery(app.name, broker=app.config[\'CELERY_BROKER_URL\'])\ncelery.conf.update(app.config)\n\n\n@celery.task\ndef send_async_email(msgd):\n    """"""Background task to send an email with Flask-Mail.""""""\n    msg = Message(msgd[\'subject\'], sender=app.config[\'MAIL_DEFAULT_SENDER\'], recipients=[msgd[\'to\']])\n    msg.body = \'This is a test email sent from a background Celery task.\'\n    with app.app_context():\n        mail.send(msg)\n\n\n@celery.task(bind=True)\ndef long_task(self):\n    """"""Background task that runs a long function with progress reports.""""""\n    verb = [\'Starting up\', \'Booting\', \'Repairing\', \'Loading\', \'Checking\']\n    adjective = [\'master\', \'radiant\', \'silent\', \'harmonic\', \'fast\']\n    noun = [\'solar array\', \'particle reshaper\', \'cosmic ray\', \'orbiter\', \'bit\']\n    message = \'\'\n    total = random.randint(10, 50)\n    for i in range(total):\n        if not message or random.random() < 0.25:\n            message = \'{0} {1} {2}...\'.format(random.choice(verb),\n                                              random.choice(adjective),\n                                              random.choice(noun))\n        self.update_state(state=\'PROGRESS\',\n                          meta={\'current\': i, \'total\': total,\n                                \'status\': message})\n        time.sleep(1)\n    return {\'current\': 100, \'total\': 100, \'status\': \'Task completed!\',\n            \'result\': 42}\n\n\n@app.route(\'/\', methods=[\'GET\', \'POST\'])\ndef index():\n    if request.method == \'GET\':\n        return render_template(\'index.html\', email=session.get(\'email\', \'\'))\n    email = request.form[\'email\']\n    session[\'email\'] = email\n\n    subject = ""Hello From Flask""\n    msgd = {\'to\': request.form[\'email\'], \'subject\': subject}\n    # send the email\n    if request.form[\'submit\'] == \'Send\':\n        # send right away\n        send_async_email.delay(msgd)\n        flash(\'Sending email to {0}\'.format(email))\n    else:\n        # send in one minute\n        send_async_email.apply_async(args=[msgd], countdown=60)\n        flash(\'An email will be sent to {0} in one minute\'.format(email))\n\n    return redirect(url_for(\'index\'))\n\n\n@app.route(\'/longtask\', methods=[\'POST\'])\ndef longtask():\n    task = long_task.apply_async()\n    return jsonify({}), 202, {\'Location\': url_for(\'taskstatus\',\n                                                  task_id=task.id)}\n\n\n@app.route(\'/status/<task_id>\')\ndef taskstatus(task_id):\n    task = long_task.AsyncResult(task_id)\n    if task.state == \'PENDING\':\n        response = {\n            \'state\': task.state,\n            \'current\': 0,\n            \'total\': 1,\n            \'status\': \'Pending...\'\n        }\n    elif task.state != \'FAILURE\':\n        response = {\n            \'state\': task.state,\n            \'current\': task.info.get(\'current\', 0),\n            \'total\': task.info.get(\'total\', 1),\n            \'status\': task.info.get(\'status\', \'\')\n        }\n        if \'result\' in task.info:\n            response[\'result\'] = task.info[\'result\']\n    else:\n        # something went wrong in the background job\n        response = {\n            \'state\': task.state,\n            \'current\': 1,\n            \'total\': 1,\n            \'status\': str(task.info),  # this is the exception raised\n        }\n    return jsonify(response)\n\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n'"
requirements.txt,blob,b'amqp==2.5.0\nbilliard==3.6.0.0\nblinker==1.4\ncelery==4.3.0\nClick==7.0\nFlask==1.0.3\nFlask-Mail==0.9.1\nitsdangerous==1.1.0\nJinja2==2.10.1\nkombu==4.6.0\nMarkupSafe==1.1.1\npytz==2019.1\nredis==3.2.1\nvine==1.3.0\nWerkzeug==0.15.4\n'
run-redis.sh,blob,b'#!/bin/bash\nif [ ! -d redis-stable/src ]; then\n    curl -O http://download.redis.io/redis-stable.tar.gz\n    tar xvzf redis-stable.tar.gz\n    rm redis-stable.tar.gz\nfi\ncd redis-stable\nmake\nsrc/redis-server\n'
index.html,blob,"b'<html>\n  <head>\n    <title>Flask + Celery Examples</title>\n    <style>\n        .progress {\n            width: 100%;\n            text-align: center;\n        }\n    </style>\n  </head>\n  <body>\n    <h1>Flask + Celery Examples</h1>\n    <h2>Example 1: Send Asynchronous Email</h2>\n    {% for message in get_flashed_messages() %}\n    <p style=""color: red;"">{{ message }}</p>\n    {% endfor %}\n    <form method=""POST"">\n      <p>Send test email to: <input type=""text"" name=""email"" value=""{{ email }}""></p>\n      <input type=""submit"" name=""submit"" value=""Send"">\n      <input type=""submit"" name=""submit"" value=""Send in 1 minute"">\n    </form>\n    <hr>\n    <h2>Example 2: Long running task with progress updates</h2>\n    <!--<button onclick=""start_long_task();"">Start Long Calculation</button><br><br>-->\n    <button id=""start-bg-job"">Start Long Calculation</button><br><br>\n    <div id=""progress""></div>\n\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/nanobar/0.2.1/nanobar.min.js""></script>\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js""></script>\n    <script>\n        function start_long_task() {\n            // add task status elements\n            div = $(\'<div class=""progress""><div></div><div>0%</div><div>...</div><div>&nbsp;</div></div><hr>\');\n            $(\'#progress\').append(div);\n\n            // create a progress bar\n            var nanobar = new Nanobar({\n                bg: \'#44f\',\n                target: div[0].childNodes[0]\n            });\n\n            // send ajax POST request to start background job\n            $.ajax({\n                type: \'POST\',\n                url: \'/longtask\',\n                success: function(data, status, request) {\n                    status_url = request.getResponseHeader(\'Location\');\n                    update_progress(status_url, nanobar, div[0]);\n                },\n                error: function() {\n                    alert(\'Unexpected error\');\n                }\n            });\n        }\n        function update_progress(status_url, nanobar, status_div) {\n            // send GET request to status URL\n            $.getJSON(status_url, function(data) {\n                // update UI\n                percent = parseInt(data[\'current\'] * 100 / data[\'total\']);\n                nanobar.go(percent);\n                $(status_div.childNodes[1]).text(percent + \'%\');\n                $(status_div.childNodes[2]).text(data[\'status\']);\n                if (data[\'state\'] != \'PENDING\' && data[\'state\'] != \'PROGRESS\') {\n                    if (\'result\' in data) {\n                        // show result\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'result\']);\n                    }\n                    else {\n                        // something unexpected happened\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'state\']);\n                    }\n                }\n                else {\n                    // rerun in 2 seconds\n                    setTimeout(function() {\n                        update_progress(status_url, nanobar, status_div);\n                    }, 2000);\n                }\n            });\n        }\n        $(function() {\n            $(\'#start-bg-job\').click(start_long_task);\n        });\n    </script>\n  </body>\n</html>\n'"
.gitignore,blob,"b'# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n'"
LICENSE,blob,"b'The MIT License (MIT)\n\nCopyright (c) 2014 Miguel Grinberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the ""Software""), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n'"
README.md,blob,"b'Using Celery with Flask\n=======================\n\nThis repository contains the example code for my blog article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n\nThe application provides two examples of background tasks using Celery:\n\n- Example 1 sends emails asynchronously.\n- Example 2 launches one or more asynchronous jobs and shows progress updates in the web page.\n\nHere is a screenshot of this application:\n\n<center><img src=""http://blog.miguelgrinberg.com/static/images/flask-celery.png""></center>\n\nQuick Setup\n-----------\n\n1. Clone this repository.\n2. Create a virtualenv and install the requirements.\n3. Open a second terminal window and start a local Redis server (if you are on Linux or Mac, execute `run-redis.sh` to install and launch a private copy).\n4. Open a third terminal window. Set two environment variables `MAIL_USERNAME` and `MAIL_PASSWORD` to a valid Gmail account credentials (these will be used to send test emails). Then start a Celery worker: `venv/bin/celery worker -A app.celery --loglevel=info`.\n5. Start the Flask application on your original terminal window: `venv/bin/python app.py`.\n6. Go to `http://localhost:5000/` and enjoy this application!\n\nFor details on how this all works, see my article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n'"
app.py,blob,"b'import os\nimport random\nimport time\nfrom flask import Flask, request, render_template, session, flash, redirect, \\\n    url_for, jsonify\nfrom flask_mail import Mail, Message\nfrom celery import Celery\n\n\napp = Flask(__name__)\napp.config[\'SECRET_KEY\'] = \'top-secret!\'\n\n# Flask-Mail configuration\napp.config[\'MAIL_SERVER\'] = \'smtp.googlemail.com\'\napp.config[\'MAIL_PORT\'] = 587\napp.config[\'MAIL_USE_TLS\'] = True\napp.config[\'MAIL_USERNAME\'] = os.environ.get(\'MAIL_USERNAME\')\napp.config[\'MAIL_PASSWORD\'] = os.environ.get(\'MAIL_PASSWORD\')\napp.config[\'MAIL_DEFAULT_SENDER\'] = \'flask@example.com\'\n\n# Celery configuration\napp.config[\'CELERY_BROKER_URL\'] = \'redis://localhost:6379/0\'\napp.config[\'CELERY_RESULT_BACKEND\'] = \'redis://localhost:6379/0\'\n\n\n# Initialize extensions\nmail = Mail(app)\n\n# Initialize Celery\ncelery = Celery(app.name, broker=app.config[\'CELERY_BROKER_URL\'])\ncelery.conf.update(app.config)\n\n\n@celery.task\ndef send_async_email(msgd):\n    """"""Background task to send an email with Flask-Mail.""""""\n    msg = Message(msgd[\'subject\'], sender=app.config[\'MAIL_DEFAULT_SENDER\'], recipients=[msgd[\'to\']])\n    msg.body = \'This is a test email sent from a background Celery task.\'\n    with app.app_context():\n        mail.send(msg)\n\n\n@celery.task(bind=True)\ndef long_task(self):\n    """"""Background task that runs a long function with progress reports.""""""\n    verb = [\'Starting up\', \'Booting\', \'Repairing\', \'Loading\', \'Checking\']\n    adjective = [\'master\', \'radiant\', \'silent\', \'harmonic\', \'fast\']\n    noun = [\'solar array\', \'particle reshaper\', \'cosmic ray\', \'orbiter\', \'bit\']\n    message = \'\'\n    total = random.randint(10, 50)\n    for i in range(total):\n        if not message or random.random() < 0.25:\n            message = \'{0} {1} {2}...\'.format(random.choice(verb),\n                                              random.choice(adjective),\n                                              random.choice(noun))\n        self.update_state(state=\'PROGRESS\',\n                          meta={\'current\': i, \'total\': total,\n                                \'status\': message})\n        time.sleep(1)\n    return {\'current\': 100, \'total\': 100, \'status\': \'Task completed!\',\n            \'result\': 42}\n\n\n@app.route(\'/\', methods=[\'GET\', \'POST\'])\ndef index():\n    if request.method == \'GET\':\n        return render_template(\'index.html\', email=session.get(\'email\', \'\'))\n    email = request.form[\'email\']\n    session[\'email\'] = email\n\n    subject = ""Hello From Flask""\n    msgd = {\'to\': request.form[\'email\'], \'subject\': subject}\n    # send the email\n    if request.form[\'submit\'] == \'Send\':\n        # send right away\n        send_async_email.delay(msgd)\n        flash(\'Sending email to {0}\'.format(email))\n    else:\n        # send in one minute\n        send_async_email.apply_async(args=[msgd], countdown=60)\n        flash(\'An email will be sent to {0} in one minute\'.format(email))\n\n    return redirect(url_for(\'index\'))\n\n\n@app.route(\'/longtask\', methods=[\'POST\'])\ndef longtask():\n    task = long_task.apply_async()\n    return jsonify({}), 202, {\'Location\': url_for(\'taskstatus\',\n                                                  task_id=task.id)}\n\n\n@app.route(\'/status/<task_id>\')\ndef taskstatus(task_id):\n    task = long_task.AsyncResult(task_id)\n    if task.state == \'PENDING\':\n        response = {\n            \'state\': task.state,\n            \'current\': 0,\n            \'total\': 1,\n            \'status\': \'Pending...\'\n        }\n    elif task.state != \'FAILURE\':\n        response = {\n            \'state\': task.state,\n            \'current\': task.info.get(\'current\', 0),\n            \'total\': task.info.get(\'total\', 1),\n            \'status\': task.info.get(\'status\', \'\')\n        }\n        if \'result\' in task.info:\n            response[\'result\'] = task.info[\'result\']\n    else:\n        # something went wrong in the background job\n        response = {\n            \'state\': task.state,\n            \'current\': 1,\n            \'total\': 1,\n            \'status\': str(task.info),  # this is the exception raised\n        }\n    return jsonify(response)\n\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n'"
requirements.txt,blob,b'amqp==2.5.0\nbilliard==3.6.0.0\nblinker==1.4\ncelery==4.3.0\nClick==7.0\nFlask==1.0.3\nFlask-Mail==0.9.1\nitsdangerous==1.1.0\nJinja2==2.10.1\nkombu==4.6.0\nMarkupSafe==1.1.1\npytz==2019.1\nredis==3.2.1\nvine==1.3.0\nWerkzeug==0.15.4\n'
run-redis.sh,blob,b'#!/bin/bash\nif [ ! -d redis-stable/src ]; then\n    curl -O http://download.redis.io/redis-stable.tar.gz\n    tar xvzf redis-stable.tar.gz\n    rm redis-stable.tar.gz\nfi\ncd redis-stable\nmake\nsrc/redis-server\n'
index.html,blob,"b'<html>\n  <head>\n    <title>Flask + Celery Examples</title>\n    <style>\n        .progress {\n            width: 100%;\n            text-align: center;\n        }\n    </style>\n  </head>\n  <body>\n    <h1>Flask + Celery Examples</h1>\n    <h2>Example 1: Send Asynchronous Email</h2>\n    {% for message in get_flashed_messages() %}\n    <p style=""color: red;"">{{ message }}</p>\n    {% endfor %}\n    <form method=""POST"">\n      <p>Send test email to: <input type=""text"" name=""email"" value=""{{ email }}""></p>\n      <input type=""submit"" name=""submit"" value=""Send"">\n      <input type=""submit"" name=""submit"" value=""Send in 1 minute"">\n    </form>\n    <hr>\n    <h2>Example 2: Long running task with progress updates</h2>\n    <!--<button onclick=""start_long_task();"">Start Long Calculation</button><br><br>-->\n    <button id=""start-bg-job"">Start Long Calculation</button><br><br>\n    <div id=""progress""></div>\n\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/nanobar/0.2.1/nanobar.min.js""></script>\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js""></script>\n    <script>\n        function start_long_task() {\n            // add task status elements\n            div = $(\'<div class=""progress""><div></div><div>0%</div><div>...</div><div>&nbsp;</div></div><hr>\');\n            $(\'#progress\').append(div);\n\n            // create a progress bar\n            var nanobar = new Nanobar({\n                bg: \'#44f\',\n                target: div[0].childNodes[0]\n            });\n\n            // send ajax POST request to start background job\n            $.ajax({\n                type: \'POST\',\n                url: \'/longtask\',\n                success: function(data, status, request) {\n                    status_url = request.getResponseHeader(\'Location\');\n                    update_progress(status_url, nanobar, div[0]);\n                },\n                error: function() {\n                    alert(\'Unexpected error\');\n                }\n            });\n        }\n        function update_progress(status_url, nanobar, status_div) {\n            // send GET request to status URL\n            $.getJSON(status_url, function(data) {\n                // update UI\n                percent = parseInt(data[\'current\'] * 100 / data[\'total\']);\n                nanobar.go(percent);\n                $(status_div.childNodes[1]).text(percent + \'%\');\n                $(status_div.childNodes[2]).text(data[\'status\']);\n                if (data[\'state\'] != \'PENDING\' && data[\'state\'] != \'PROGRESS\') {\n                    if (\'result\' in data) {\n                        // show result\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'result\']);\n                    }\n                    else {\n                        // something unexpected happened\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'state\']);\n                    }\n                }\n                else {\n                    // rerun in 2 seconds\n                    setTimeout(function() {\n                        update_progress(status_url, nanobar, status_div);\n                    }, 2000);\n                }\n            });\n        }\n        $(function() {\n            $(\'#start-bg-job\').click(start_long_task);\n        });\n    </script>\n  </body>\n</html>\n'"
.gitignore,blob,"b'# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n'"
LICENSE,blob,"b'The MIT License (MIT)\n\nCopyright (c) 2014 Miguel Grinberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the ""Software""), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n'"
README.md,blob,"b'Using Celery with Flask\n=======================\n\nThis repository contains the example code for my blog article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n\nThe application provides two examples of background tasks using Celery:\n\n- Example 1 sends emails asynchronously.\n- Example 2 launches one or more asynchronous jobs and shows progress updates in the web page.\n\nHere is a screenshot of this application:\n\n<center><img src=""http://blog.miguelgrinberg.com/static/images/flask-celery.png""></center>\n\nQuick Setup\n-----------\n\n1. Clone this repository.\n2. Create a virtualenv and install the requirements.\n3. Open a second terminal window and start a local Redis server (if you are on Linux or Mac, execute `run-redis.sh` to install and launch a private copy).\n4. Open a third terminal window. Set two environment variables `MAIL_USERNAME` and `MAIL_PASSWORD` to a valid Gmail account credentials (these will be used to send test emails). Then start a Celery worker: `venv/bin/celery worker -A app.celery --loglevel=info`.\n5. Start the Flask application on your original terminal window: `venv/bin/python app.py`.\n6. Go to `http://localhost:5000/` and enjoy this application!\n\nFor details on how this all works, see my article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n'"
app.py,blob,"b'import os\nimport random\nimport time\nfrom flask import Flask, request, render_template, session, flash, redirect, \\\n    url_for, jsonify\nfrom flask_mail import Mail, Message\nfrom celery import Celery\n\n\napp = Flask(__name__)\napp.config[\'SECRET_KEY\'] = \'top-secret!\'\n\n# Flask-Mail configuration\napp.config[\'MAIL_SERVER\'] = \'smtp.googlemail.com\'\napp.config[\'MAIL_PORT\'] = 587\napp.config[\'MAIL_USE_TLS\'] = True\napp.config[\'MAIL_USERNAME\'] = os.environ.get(\'MAIL_USERNAME\')\napp.config[\'MAIL_PASSWORD\'] = os.environ.get(\'MAIL_PASSWORD\')\napp.config[\'MAIL_DEFAULT_SENDER\'] = \'flask@example.com\'\n\n# Celery configuration\napp.config[\'CELERY_BROKER_URL\'] = \'redis://localhost:6379/0\'\napp.config[\'CELERY_RESULT_BACKEND\'] = \'redis://localhost:6379/0\'\n\n\n# Initialize extensions\nmail = Mail(app)\n\n# Initialize Celery\ncelery = Celery(app.name, broker=app.config[\'CELERY_BROKER_URL\'])\ncelery.conf.update(app.config)\n\n\n@celery.task\ndef send_async_email(msg):\n    """"""Background task to send an email with Flask-Mail.""""""\n    with app.app_context():\n        mail.send(msg)\n\n\n@celery.task(bind=True)\ndef long_task(self):\n    """"""Background task that runs a long function with progress reports.""""""\n    verb = [\'Starting up\', \'Booting\', \'Repairing\', \'Loading\', \'Checking\']\n    adjective = [\'master\', \'radiant\', \'silent\', \'harmonic\', \'fast\']\n    noun = [\'solar array\', \'particle reshaper\', \'cosmic ray\', \'orbiter\', \'bit\']\n    message = \'\'\n    total = random.randint(10, 50)\n    for i in range(total):\n        if not message or random.random() < 0.25:\n            message = \'{0} {1} {2}...\'.format(random.choice(verb),\n                                              random.choice(adjective),\n                                              random.choice(noun))\n        self.update_state(state=\'PROGRESS\',\n                          meta={\'current\': i, \'total\': total,\n                                \'status\': message})\n        time.sleep(1)\n    return {\'current\': 100, \'total\': 100, \'status\': \'Task completed!\',\n            \'result\': 42}\n\n\n@app.route(\'/\', methods=[\'GET\', \'POST\'])\ndef index():\n    if request.method == \'GET\':\n        return render_template(\'index.html\', email=session.get(\'email\', \'\'))\n    email = request.form[\'email\']\n    session[\'email\'] = email\n\n    # send the email\n    msg = Message(\'Hello from Flask\',\n                  recipients=[request.form[\'email\']])\n    msg.body = \'This is a test email sent from a background Celery task.\'\n    if request.form[\'submit\'] == \'Send\':\n        # send right away\n        send_async_email.delay(msg)\n        flash(\'Sending email to {0}\'.format(email))\n    else:\n        # send in one minute\n        send_async_email.apply_async(args=[msg], countdown=60)\n        flash(\'An email will be sent to {0} in one minute\'.format(email))\n\n    return redirect(url_for(\'index\'))\n\n\n@app.route(\'/longtask\', methods=[\'POST\'])\ndef longtask():\n    task = long_task.apply_async()\n    return jsonify({}), 202, {\'Location\': url_for(\'taskstatus\',\n                                                  task_id=task.id)}\n\n\n@app.route(\'/status/<task_id>\')\ndef taskstatus(task_id):\n    task = long_task.AsyncResult(task_id)\n    if task.state == \'PENDING\':\n        response = {\n            \'state\': task.state,\n            \'current\': 0,\n            \'total\': 1,\n            \'status\': \'Pending...\'\n        }\n    elif task.state != \'FAILURE\':\n        response = {\n            \'state\': task.state,\n            \'current\': task.info.get(\'current\', 0),\n            \'total\': task.info.get(\'total\', 1),\n            \'status\': task.info.get(\'status\', \'\')\n        }\n        if \'result\' in task.info:\n            response[\'result\'] = task.info[\'result\']\n    else:\n        # something went wrong in the background job\n        response = {\n            \'state\': task.state,\n            \'current\': 1,\n            \'total\': 1,\n            \'status\': str(task.info),  # this is the exception raised\n        }\n    return jsonify(response)\n\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n'"
requirements.txt,blob,b'amqp==2.5.0\nbilliard==3.6.0.0\nblinker==1.4\ncelery==4.3.0\nClick==7.0\nFlask==1.0.3\nFlask-Mail==0.9.1\nitsdangerous==1.1.0\nJinja2==2.10.1\nkombu==4.6.0\nMarkupSafe==1.1.1\npytz==2019.1\nredis==3.2.1\nvine==1.3.0\nWerkzeug==0.15.4\n'
run-redis.sh,blob,b'#!/bin/bash\nif [ ! -d redis-stable/src ]; then\n    curl -O http://download.redis.io/redis-stable.tar.gz\n    tar xvzf redis-stable.tar.gz\n    rm redis-stable.tar.gz\nfi\ncd redis-stable\nmake\nsrc/redis-server\n'
index.html,blob,"b'<html>\n  <head>\n    <title>Flask + Celery Examples</title>\n    <style>\n        .progress {\n            width: 100%;\n            text-align: center;\n        }\n    </style>\n  </head>\n  <body>\n    <h1>Flask + Celery Examples</h1>\n    <h2>Example 1: Send Asynchronous Email</h2>\n    {% for message in get_flashed_messages() %}\n    <p style=""color: red;"">{{ message }}</p>\n    {% endfor %}\n    <form method=""POST"">\n      <p>Send test email to: <input type=""text"" name=""email"" value=""{{ email }}""></p>\n      <input type=""submit"" name=""submit"" value=""Send"">\n      <input type=""submit"" name=""submit"" value=""Send in 1 minute"">\n    </form>\n    <hr>\n    <h2>Example 2: Long running task with progress updates</h2>\n    <!--<button onclick=""start_long_task();"">Start Long Calculation</button><br><br>-->\n    <button id=""start-bg-job"">Start Long Calculation</button><br><br>\n    <div id=""progress""></div>\n\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/nanobar/0.2.1/nanobar.min.js""></script>\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js""></script>\n    <script>\n        function start_long_task() {\n            // add task status elements\n            div = $(\'<div class=""progress""><div></div><div>0%</div><div>...</div><div>&nbsp;</div></div><hr>\');\n            $(\'#progress\').append(div);\n\n            // create a progress bar\n            var nanobar = new Nanobar({\n                bg: \'#44f\',\n                target: div[0].childNodes[0]\n            });\n\n            // send ajax POST request to start background job\n            $.ajax({\n                type: \'POST\',\n                url: \'/longtask\',\n                success: function(data, status, request) {\n                    status_url = request.getResponseHeader(\'Location\');\n                    update_progress(status_url, nanobar, div[0]);\n                },\n                error: function() {\n                    alert(\'Unexpected error\');\n                }\n            });\n        }\n        function update_progress(status_url, nanobar, status_div) {\n            // send GET request to status URL\n            $.getJSON(status_url, function(data) {\n                // update UI\n                percent = parseInt(data[\'current\'] * 100 / data[\'total\']);\n                nanobar.go(percent);\n                $(status_div.childNodes[1]).text(percent + \'%\');\n                $(status_div.childNodes[2]).text(data[\'status\']);\n                if (data[\'state\'] != \'PENDING\' && data[\'state\'] != \'PROGRESS\') {\n                    if (\'result\' in data) {\n                        // show result\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'result\']);\n                    }\n                    else {\n                        // something unexpected happened\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'state\']);\n                    }\n                }\n                else {\n                    // rerun in 2 seconds\n                    setTimeout(function() {\n                        update_progress(status_url, nanobar, status_div);\n                    }, 2000);\n                }\n            });\n        }\n        $(function() {\n            $(\'#start-bg-job\').click(start_long_task);\n        });\n    </script>\n  </body>\n</html>\n'"
.gitignore,blob,"b'# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n'"
LICENSE,blob,"b'The MIT License (MIT)\n\nCopyright (c) 2014 Miguel Grinberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the ""Software""), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n'"
README.md,blob,"b'Using Celery with Flask\n=======================\n\nThis repository contains the example code for my blog article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n\nThe application provides two examples of background tasks using Celery:\n\n- Example 1 sends emails asynchronously.\n- Example 2 launches one or more asynchronous jobs and shows progress updates in the web page.\n\nHere is a screenshot of this application:\n\n<center><img src=""http://blog.miguelgrinberg.com/static/images/flask-celery.png""></center>\n\nQuick Setup\n-----------\n\n1. Clone this repository.\n2. Create a virtualenv and install the requirements.\n3. Open a second terminal window and start a local Redis server (if you are on Linux or Mac, execute `run-redis.sh` to install and launch a private copy).\n4. Open a third terminal window. Set two environment variables `MAIL_USERNAME` and `MAIL_PASSWORD` to a valid Gmail account credentials (these will be used to send test emails). Then start a Celery worker: `venv/bin/celery worker -A app.celery --loglevel=info`.\n5. Start the Flask application on your original terminal window: `venv/bin/python app.py`.\n6. Go to `http://localhost:5000/` and enjoy this application!\n\nFor details on how this all works, see my article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n'"
app.py,blob,"b'import os\nimport random\nimport time\nfrom flask import Flask, request, render_template, session, flash, redirect, \\\n    url_for, jsonify\nfrom flask.ext.mail import Mail, Message\nfrom celery import Celery\n\n\napp = Flask(__name__)\napp.config[\'SECRET_KEY\'] = \'top-secret!\'\n\n# Flask-Mail configuration\napp.config[\'MAIL_SERVER\'] = \'smtp.googlemail.com\'\napp.config[\'MAIL_PORT\'] = 587\napp.config[\'MAIL_USE_TLS\'] = True\napp.config[\'MAIL_USERNAME\'] = os.environ.get(\'MAIL_USERNAME\')\napp.config[\'MAIL_PASSWORD\'] = os.environ.get(\'MAIL_PASSWORD\')\napp.config[\'MAIL_DEFAULT_SENDER\'] = \'flask@example.com\'\n\n# Celery configuration\napp.config[\'CELERY_BROKER_URL\'] = \'redis://localhost:6379/0\'\napp.config[\'CELERY_RESULT_BACKEND\'] = \'redis://localhost:6379/0\'\n\n\n# Initialize extensions\nmail = Mail(app)\n\n# Initialize Celery\ncelery = Celery(app.name, broker=app.config[\'CELERY_BROKER_URL\'])\ncelery.conf.update(app.config)\n\n\n@celery.task\ndef send_async_email(msg):\n    """"""Background task to send an email with Flask-Mail.""""""\n    with app.app_context():\n        mail.send(msg)\n\n\n@celery.task(bind=True)\ndef long_task(self):\n    """"""Background task that runs a long function with progress reports.""""""\n    verb = [\'Starting up\', \'Booting\', \'Repairing\', \'Loading\', \'Checking\']\n    adjective = [\'master\', \'radiant\', \'silent\', \'harmonic\', \'fast\']\n    noun = [\'solar array\', \'particle reshaper\', \'cosmic ray\', \'orbiter\', \'bit\']\n    message = \'\'\n    total = random.randint(10, 50)\n    for i in range(total):\n        if not message or random.random() < 0.25:\n            message = \'{0} {1} {2}...\'.format(random.choice(verb),\n                                              random.choice(adjective),\n                                              random.choice(noun))\n        self.update_state(state=\'PROGRESS\',\n                          meta={\'current\': i, \'total\': total,\n                                \'status\': message})\n        time.sleep(1)\n    return {\'current\': 100, \'total\': 100, \'status\': \'Task completed!\',\n            \'result\': 42}\n\n\n@app.route(\'/\', methods=[\'GET\', \'POST\'])\ndef index():\n    if request.method == \'GET\':\n        return render_template(\'index.html\', email=session.get(\'email\', \'\'))\n    email = request.form[\'email\']\n    session[\'email\'] = email\n\n    # send the email\n    msg = Message(\'Hello from Flask\',\n                  recipients=[request.form[\'email\']])\n    msg.body = \'This is a test email sent from a background Celery task.\'\n    if request.form[\'submit\'] == \'Send\':\n        # send right away\n        send_async_email.delay(msg)\n        flash(\'Sending email to {0}\'.format(email))\n    else:\n        # send in one minute\n        send_async_email.apply_async(args=[msg], countdown=60)\n        flash(\'An email will be sent to {0} in one minute\'.format(email))\n\n    return redirect(url_for(\'index\'))\n\n\n@app.route(\'/longtask\', methods=[\'POST\'])\ndef longtask():\n    task = long_task.apply_async()\n    return jsonify({}), 202, {\'Location\': url_for(\'taskstatus\',\n                                                  task_id=task.id)}\n\n\n@app.route(\'/status/<task_id>\')\ndef taskstatus(task_id):\n    task = long_task.AsyncResult(task_id)\n    if task.state == \'PENDING\':\n        response = {\n            \'state\': task.state,\n            \'current\': 0,\n            \'total\': 1,\n            \'status\': \'Pending...\'\n        }\n    elif task.state != \'FAILURE\':\n        response = {\n            \'state\': task.state,\n            \'current\': task.info.get(\'current\', 0),\n            \'total\': task.info.get(\'total\', 1),\n            \'status\': task.info.get(\'status\', \'\')\n        }\n        if \'result\' in task.info:\n            response[\'result\'] = task.info[\'result\']\n    else:\n        # something went wrong in the background job\n        response = {\n            \'state\': task.state,\n            \'current\': 1,\n            \'total\': 1,\n            \'status\': str(task.info),  # this is the exception raised\n        }\n    return jsonify(response)\n\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n'"
requirements.txt,blob,b'Flask==0.10.1\nFlask-Mail==0.9.1\nJinja2==2.7.3\nMarkupSafe==0.23\nWerkzeug==0.9.6\namqp==1.4.6\nanyjson==0.3.3\nargparse==1.2.1\nbilliard==3.3.0.19\nblinker==1.3\ncelery==3.1.17\nitsdangerous==0.24\nkombu==3.0.30\npytz==2014.10\nredis==2.10.3\n'
run-redis.sh,blob,b'#!/bin/bash\nif [ ! -d redis-stable/src ]; then\n    curl -O http://download.redis.io/redis-stable.tar.gz\n    tar xvzf redis-stable.tar.gz\n    rm redis-stable.tar.gz\nfi\ncd redis-stable\nmake\nsrc/redis-server\n'
index.html,blob,"b'<html>\n  <head>\n    <title>Flask + Celery Examples</title>\n    <style>\n        .progress {\n            width: 100%;\n            text-align: center;\n        }\n    </style>\n  </head>\n  <body>\n    <h1>Flask + Celery Examples</h1>\n    <h2>Example 1: Send Asynchronous Email</h2>\n    {% for message in get_flashed_messages() %}\n    <p style=""color: red;"">{{ message }}</p>\n    {% endfor %}\n    <form method=""POST"">\n      <p>Send test email to: <input type=""text"" name=""email"" value=""{{ email }}""></p>\n      <input type=""submit"" name=""submit"" value=""Send"">\n      <input type=""submit"" name=""submit"" value=""Send in 1 minute"">\n    </form>\n    <hr>\n    <h2>Example 2: Long running task with progress updates</h2>\n    <!--<button onclick=""start_long_task();"">Start Long Calculation</button><br><br>-->\n    <button id=""start-bg-job"">Start Long Calculation</button><br><br>\n    <div id=""progress""></div>\n\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/nanobar/0.2.1/nanobar.min.js""></script>\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js""></script>\n    <script>\n        function start_long_task() {\n            // add task status elements\n            div = $(\'<div class=""progress""><div></div><div>0%</div><div>...</div><div>&nbsp;</div></div><hr>\');\n            $(\'#progress\').append(div);\n\n            // create a progress bar\n            var nanobar = new Nanobar({\n                bg: \'#44f\',\n                target: div[0].childNodes[0]\n            });\n\n            // send ajax POST request to start background job\n            $.ajax({\n                type: \'POST\',\n                url: \'/longtask\',\n                success: function(data, status, request) {\n                    status_url = request.getResponseHeader(\'Location\');\n                    update_progress(status_url, nanobar, div[0]);\n                },\n                error: function() {\n                    alert(\'Unexpected error\');\n                }\n            });\n        }\n        function update_progress(status_url, nanobar, status_div) {\n            // send GET request to status URL\n            $.getJSON(status_url, function(data) {\n                // update UI\n                percent = parseInt(data[\'current\'] * 100 / data[\'total\']);\n                nanobar.go(percent);\n                $(status_div.childNodes[1]).text(percent + \'%\');\n                $(status_div.childNodes[2]).text(data[\'status\']);\n                if (data[\'state\'] != \'PENDING\' && data[\'state\'] != \'PROGRESS\') {\n                    if (\'result\' in data) {\n                        // show result\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'result\']);\n                    }\n                    else {\n                        // something unexpected happened\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'state\']);\n                    }\n                }\n                else {\n                    // rerun in 2 seconds\n                    setTimeout(function() {\n                        update_progress(status_url, nanobar, status_div);\n                    }, 2000);\n                }\n            });\n        }\n        $(function() {\n            $(\'#start-bg-job\').click(start_long_task);\n        });\n    </script>\n  </body>\n</html>\n'"
.gitignore,blob,"b'# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n'"
LICENSE,blob,"b'The MIT License (MIT)\n\nCopyright (c) 2014 Miguel Grinberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the ""Software""), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n'"
README.md,blob,"b'Using Celery with Flask\n=======================\n\nThis repository contains the example code for my blog article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n\nThe application provides two examples of background tasks using Celery:\n\n- Example 1 sends emails asynchronously.\n- Example 2 launches one or more asynchronous jobs and shows progress updates in the web page.\n\nHere is a screenshot of this application:\n\n<center><img src=""http://blog.miguelgrinberg.com/static/images/flask-celery.png""></center>\n\nQuick Setup\n-----------\n\n1. Clone this repository.\n2. Create a virtualenv and install the requirements.\n3. Open a second terminal window and start a local Redis server (if you are on Linux or Mac, execute `run-redis.sh` to install and launch a private copy).\n4. Open a third terminal window. Set two environment variables `MAIL_USERNAME` and `MAIL_PASSWORD` to a valid Gmail account credentials (these will be used to send test emails). Then start a Celery worker: `venv/bin/celery worker -A app.celery --loglevel=info`.\n5. Start the Flask application on your original terminal window: `venv/bin/python app.py`.\n6. Go to `http://localhost:5000/` and enjoy this application!\n\nFor details on how this all works, see my article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n'"
app.py,blob,"b'import os\nimport random\nimport time\nfrom flask import Flask, request, render_template, session, flash, redirect, \\\n    url_for, jsonify\nfrom flask.ext.mail import Mail, Message\nfrom celery import Celery\n\n\napp = Flask(__name__)\napp.config[\'SECRET_KEY\'] = \'top-secret!\'\n\n# Flask-Mail configuration\napp.config[\'MAIL_SERVER\'] = \'smtp.googlemail.com\'\napp.config[\'MAIL_PORT\'] = 587\napp.config[\'MAIL_USE_TLS\'] = True\napp.config[\'MAIL_USERNAME\'] = os.environ.get(\'MAIL_USERNAME\')\napp.config[\'MAIL_PASSWORD\'] = os.environ.get(\'MAIL_PASSWORD\')\napp.config[\'MAIL_DEFAULT_SENDER\'] = \'flask@example.com\'\n\n# Celery configuration\napp.config[\'CELERY_BROKER_URL\'] = \'redis://localhost:6379/0\'\napp.config[\'CELERY_RESULT_BACKEND\'] = \'redis://localhost:6379/0\'\n\n\n# Initialize extensions\nmail = Mail(app)\n\n# Initialize Celery\ncelery = Celery(app.name, broker=app.config[\'CELERY_BROKER_URL\'])\ncelery.conf.update(app.config)\n\n\n@celery.task\ndef send_async_email(msg):\n    """"""Background task to send an email with Flask-Mail.""""""\n    with app.app_context():\n        mail.send(msg)\n\n\n@celery.task(bind=True)\ndef long_task(self):\n    """"""Background task that runs a long function with progress reports.""""""\n    verb = [\'Starting up\', \'Booting\', \'Repairing\', \'Loading\', \'Checking\']\n    adjective = [\'master\', \'radiant\', \'silent\', \'harmonic\', \'fast\']\n    noun = [\'solar array\', \'particle reshaper\', \'cosmic ray\', \'orbiter\', \'bit\']\n    message = \'\'\n    total = random.randint(10, 50)\n    for i in range(total):\n        if not message or random.random() < 0.25:\n            message = \'{0} {1} {2}...\'.format(random.choice(verb),\n                                              random.choice(adjective),\n                                              random.choice(noun))\n        self.update_state(state=\'PROGRESS\',\n                          meta={\'current\': i, \'total\': total,\n                                \'status\': message})\n        time.sleep(1)\n    return {\'current\': 100, \'total\': 100, \'status\': \'Task completed!\',\n            \'result\': 42}\n\n\n@app.route(\'/\', methods=[\'GET\', \'POST\'])\ndef index():\n    if request.method == \'GET\':\n        return render_template(\'index.html\', email=session.get(\'email\', \'\'))\n    email = request.form[\'email\']\n    session[\'email\'] = email\n\n    # send the email\n    msg = Message(\'Hello from Flask\',\n                  recipients=[request.form[\'email\']])\n    msg.body = \'This is a test email sent from a background Celery task.\'\n    if request.form[\'submit\'] == \'Send\':\n        # send right away\n        send_async_email.delay(msg)\n        flash(\'Sending email to {0}\'.format(email))\n    else:\n        # send in one minute\n        send_async_email.apply_async(args=[msg], countdown=60)\n        flash(\'An email will be sent to {0} in one minute\'.format(email))\n\n    return redirect(url_for(\'index\'))\n\n\n@app.route(\'/longtask\', methods=[\'POST\'])\ndef longtask():\n    task = long_task.apply_async()\n    return jsonify({}), 202, {\'Location\': url_for(\'taskstatus\',\n                                                  task_id=task.id)}\n\n\n@app.route(\'/status/<task_id>\')\ndef taskstatus(task_id):\n    task = long_task.AsyncResult(task_id)\n    if task.state == \'PENDING\':\n        response = {\n            \'state\': task.state,\n            \'current\': 0,\n            \'total\': 1,\n            \'status\': \'Pending...\'\n        }\n    elif task.state != \'FAILURE\':\n        response = {\n            \'state\': task.state,\n            \'current\': task.info.get(\'current\', 0),\n            \'total\': task.info.get(\'total\', 1),\n            \'status\': task.info.get(\'status\', \'\')\n        }\n        if \'result\' in task.info:\n            response[\'result\'] = task.info[\'result\']\n    else:\n        # something went wrong in the background job\n        response = {\n            \'state\': task.state,\n            \'current\': 1,\n            \'total\': 1,\n            \'status\': str(task.info),  # this is the exception raised\n        }\n    return jsonify(response)\n\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n'"
requirements.txt,blob,b'Flask==0.10.1\nFlask-Mail==0.9.1\nJinja2==2.7.3\nMarkupSafe==0.23\nWerkzeug==0.9.6\namqp==1.4.6\nanyjson==0.3.3\nargparse==1.2.1\nbilliard==3.3.0.19\nblinker==1.3\ncelery==3.1.17\nitsdangerous==0.24\nkombu==3.0.30\npytz==2014.10\nredis==2.10.3\n'
run-redis.sh,blob,b'#!/bin/bash\nif [ ! -d redis-stable/src ]; then\n    curl -O http://download.redis.io/redis-stable.tar.gz\n    tar xvzf redis-stable.tar.gz\n    rm redis-stable.tar.gz\nfi\ncd redis-stable\nmake\nsrc/redis-server\n'
index.html,blob,"b'<html>\n  <head>\n    <title>Flask + Celery Examples</title>\n    <style>\n        .progress {\n            width: 100%;\n            text-align: center;\n        }\n    </style>\n  </head>\n  <body>\n    <h1>Flask + Celery Examples</h1>\n    <h2>Example 1: Send Asynchronous Email</h2>\n    {% for message in get_flashed_messages() %}\n    <p style=""color: red;"">{{ message }}</p>\n    {% endfor %}\n    <form method=""POST"">\n      <p>Send test email to: <input type=""text"" name=""email"" value=""{{ email }}""></p>\n      <input type=""submit"" name=""submit"" value=""Send"">\n      <input type=""submit"" name=""submit"" value=""Send in 1 minute"">\n    </form>\n    <hr>\n    <h2>Example 2: Long running task with progress updates</h2>\n    <!--<button onclick=""start_long_task();"">Start Long Calculation</button><br><br>-->\n    <button id=""start-bg-job"">Start Long Calculation</button><br><br>\n    <div id=""progress""></div>\n\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/nanobar/0.2.1/nanobar.min.js""></script>\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js""></script>\n    <script>\n        function start_long_task() {\n            // add task status elements\n            div = $(\'<div class=""progress""><div></div><div>0%</div><div>...</div><div>&nbsp;</div></div><hr>\');\n            $(\'#progress\').append(div);\n\n            // create a progress bar\n            var nanobar = new Nanobar({\n                bg: \'#44f\',\n                target: div[0].childNodes[0]\n            });\n\n            // send ajax POST request to start background job\n            $.ajax({\n                type: \'POST\',\n                url: \'/longtask\',\n                success: function(data, status, request) {\n                    status_url = request.getResponseHeader(\'Location\');\n                    update_progress(status_url, nanobar, div[0]);\n                },\n                error: function() {\n                    alert(\'Unexpected error\');\n                }\n            });\n        }\n        function update_progress(status_url, nanobar, status_div) {\n            // send GET request to status URL\n            $.getJSON(status_url, function(data) {\n                // update UI\n                percent = parseInt(data[\'current\'] * 100 / data[\'total\']);\n                nanobar.go(percent);\n                $(status_div.childNodes[1]).text(percent + \'%\');\n                $(status_div.childNodes[2]).text(data[\'status\']);\n                if (data[\'state\'] != \'PENDING\' && data[\'state\'] != \'PROGRESS\') {\n                    if (\'result\' in data) {\n                        // show result\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'result\']);\n                    }\n                    else {\n                        // something unexpected happened\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'state\']);\n                    }\n                }\n                else {\n                    // rerun in 2 seconds\n                    setTimeout(function() {\n                        update_progress(status_url, nanobar, status_div);\n                    }, 2000);\n                }\n            });\n        }\n        $(function() {\n            $(\'#start-bg-job\').click(start_long_task);\n        });\n    </script>\n  </body>\n</html>\n'"
.gitignore,blob,"b'# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n'"
LICENSE,blob,"b'The MIT License (MIT)\n\nCopyright (c) 2014 Miguel Grinberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the ""Software""), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n'"
README.md,blob,"b'Using Celery with Flask\n=======================\n\nThis repository contains the example code for my blog article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n\nThe application provides two examples of background tasks using Celery:\n\n- Example 1 sends emails asynchronously.\n- Example 2 launches one or more asynchronous jobs and shows progress updates in the web page.\n\nHere is a screenshot of this application:\n\n<center><img src=""http://blog.miguelgrinberg.com/static/images/flask-celery.png""></center>\n\nQuick Setup\n-----------\n\n1. Clone this repository.\n2. Create a virtualenv and install the requirements.\n3. Open a second terminal window and start a local Redis server (if you are on Linux or Mac, execute `run-redis.sh` to install and launch a private copy).\n4. Open a third terminal window. Set two environment variables `MAIL_USERNAME` and `MAIL_PASSWORD` to a valid Gmail account credentials (these will be used to send test emails). Then start a Celery worker: `venv/bin/celery worker -A app.celery --loglevel=info`.\n5. Start the Flask application on your original terminal window: `venv/bin/python app.py`.\n6. Go to `http://localhost:5000/` and enjoy this application!\n\nFor details on how this all works, see my article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n'"
app.py,blob,"b'import os\nimport random\nimport time\nfrom flask import Flask, request, render_template, session, flash, redirect, \\\n    url_for, jsonify\nfrom flask.ext.mail import Mail, Message\nfrom celery import Celery\n\n\napp = Flask(__name__)\napp.config[\'SECRET_KEY\'] = \'top-secret!\'\n\n# Flask-Mail configuration\napp.config[\'MAIL_SERVER\'] = \'smtp.googlemail.com\'\napp.config[\'MAIL_PORT\'] = 587\napp.config[\'MAIL_USE_TLS\'] = True\napp.config[\'MAIL_USERNAME\'] = os.environ.get(\'MAIL_USERNAME\')\napp.config[\'MAIL_PASSWORD\'] = os.environ.get(\'MAIL_PASSWORD\')\napp.config[\'MAIL_DEFAULT_SENDER\'] = \'flask@example.com\'\n\n# Celery configuration\napp.config[\'CELERY_BROKER_URL\'] = \'redis://localhost:6379/0\'\napp.config[\'CELERY_RESULT_BACKEND\'] = \'redis://localhost:6379/0\'\n\n\n# Initialize extensions\nmail = Mail(app)\n\n# Initialize Celery\ncelery = Celery(app.name, broker=app.config[\'CELERY_BROKER_URL\'])\ncelery.conf.update(app.config)\n\n\n@celery.task\ndef send_async_email(msg):\n    """"""Background task to send an email with Flask-Mail.""""""\n    with app.app_context():\n        mail.send(msg)\n\n\n@celery.task(bind=True)\ndef long_task(self):\n    """"""Background task that runs a long function with progress reports.""""""\n    verb = [\'Starting up\', \'Booting\', \'Repairing\', \'Loading\', \'Checking\']\n    adjective = [\'master\', \'radiant\', \'silent\', \'harmonic\', \'fast\']\n    noun = [\'solar array\', \'particle reshaper\', \'cosmic ray\', \'orbiter\', \'bit\']\n    message = \'\'\n    total = random.randint(10, 50)\n    for i in range(total):\n        if not message or random.random() < 0.25:\n            message = \'{0} {1} {2}...\'.format(random.choice(verb),\n                                              random.choice(adjective),\n                                              random.choice(noun))\n        self.update_state(state=\'PROGRESS\',\n                          meta={\'current\': i, \'total\': total,\n                                \'status\': message})\n        time.sleep(1)\n    return {\'current\': 100, \'total\': 100, \'status\': \'Task completed!\',\n            \'result\': 42}\n\n\n@app.route(\'/\', methods=[\'GET\', \'POST\'])\ndef index():\n    if request.method == \'GET\':\n        return render_template(\'index.html\', email=session.get(\'email\', \'\'))\n    email = request.form[\'email\']\n    session[\'email\'] = email\n\n    # send the email\n    msg = Message(\'Hello from Flask\',\n                  recipients=[request.form[\'email\']])\n    msg.body = \'This is a test email sent from a background Celery task.\'\n    if request.form[\'submit\'] == \'Send\':\n        # send right away\n        send_async_email.delay(msg)\n        flash(\'Sending email to {0}\'.format(email))\n    else:\n        # send in one minute\n        send_async_email.apply_async(args=[msg], countdown=60)\n        flash(\'An email will be sent to {0} in one minute\'.format(email))\n\n    return redirect(url_for(\'index\'))\n\n\n@app.route(\'/longtask\', methods=[\'POST\'])\ndef longtask():\n    task = long_task.apply_async()\n    return jsonify({}), 202, {\'Location\': url_for(\'taskstatus\',\n                                                  task_id=task.id)}\n\n\n@app.route(\'/status/<task_id>\')\ndef taskstatus(task_id):\n    task = long_task.AsyncResult(task_id)\n    if task.state == \'PENDING\':\n        response = {\n            \'state\': task.state,\n            \'current\': 0,\n            \'total\': 1,\n            \'status\': \'Pending...\'\n        }\n    elif task.state != \'FAILURE\':\n        response = {\n            \'state\': task.state,\n            \'current\': task.info.get(\'current\', 0),\n            \'total\': task.info.get(\'total\', 1),\n            \'status\': task.info.get(\'status\', \'\')\n        }\n        if \'result\' in task.info:\n            response[\'result\'] = task.info[\'result\']\n    else:\n        # something went wrong in the background job\n        response = {\n            \'state\': task.state,\n            \'current\': 1,\n            \'total\': 1,\n            \'status\': str(task.info),  # this is the exception raised\n        }\n    return jsonify(response)\n\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n'"
requirements.txt,blob,b'Flask==0.10.1\nFlask-Mail==0.9.1\nJinja2==2.7.3\nMarkupSafe==0.23\nWerkzeug==0.9.6\namqp==1.4.6\nanyjson==0.3.3\nargparse==1.2.1\nbilliard==3.3.0.19\nblinker==1.3\ncelery==3.1.17\nitsdangerous==0.24\nkombu==3.0.24\npytz==2014.10\nredis==2.10.3\n'
run-redis.sh,blob,b'#!/bin/bash\nif [ ! -d redis-stable/src ]; then\n    curl -O http://download.redis.io/redis-stable.tar.gz\n    tar xvzf redis-stable.tar.gz\n    rm redis-stable.tar.gz\nfi\ncd redis-stable\nmake\nsrc/redis-server\n'
index.html,blob,"b'<html>\n  <head>\n    <title>Flask + Celery Examples</title>\n    <style>\n        .progress {\n            width: 100%;\n            text-align: center;\n        }\n    </style>\n  </head>\n  <body>\n    <h1>Flask + Celery Examples</h1>\n    <h2>Example 1: Send Asynchronous Email</h2>\n    {% for message in get_flashed_messages() %}\n    <p style=""color: red;"">{{ message }}</p>\n    {% endfor %}\n    <form method=""POST"">\n      <p>Send test email to: <input type=""text"" name=""email"" value=""{{ email }}""></p>\n      <input type=""submit"" name=""submit"" value=""Send"">\n      <input type=""submit"" name=""submit"" value=""Send in 1 minute"">\n    </form>\n    <hr>\n    <h2>Example 2: Long running task with progress updates</h2>\n    <!--<button onclick=""start_long_task();"">Start Long Calculation</button><br><br>-->\n    <button id=""start-bg-job"">Start Long Calculation</button><br><br>\n    <div id=""progress""></div>\n\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/nanobar/0.2.1/nanobar.min.js""></script>\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js""></script>\n    <script>\n        function start_long_task() {\n            // add task status elements\n            div = $(\'<div class=""progress""><div></div><div>0%</div><div>...</div><div>&nbsp;</div></div><hr>\');\n            $(\'#progress\').append(div);\n\n            // create a progress bar\n            var nanobar = new Nanobar({\n                bg: \'#44f\',\n                target: div[0].childNodes[0]\n            });\n\n            // send ajax POST request to start background job\n            $.ajax({\n                type: \'POST\',\n                url: \'/longtask\',\n                success: function(data, status, request) {\n                    status_url = request.getResponseHeader(\'Location\');\n                    update_progress(status_url, nanobar, div[0]);\n                },\n                error: function() {\n                    alert(\'Unexpected error\');\n                }\n            });\n        }\n        function update_progress(status_url, nanobar, status_div) {\n            // send GET request to status URL\n            $.getJSON(status_url, function(data) {\n                // update UI\n                percent = parseInt(data[\'current\'] * 100 / data[\'total\']);\n                nanobar.go(percent);\n                $(status_div.childNodes[1]).text(percent + \'%\');\n                $(status_div.childNodes[2]).text(data[\'status\']);\n                if (data[\'state\'] != \'PENDING\' && data[\'state\'] != \'PROGRESS\') {\n                    if (\'result\' in data) {\n                        // show result\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'result\']);\n                    }\n                    else {\n                        // something unexpected happened\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'state\']);\n                    }\n                }\n                else {\n                    // rerun in 2 seconds\n                    setTimeout(function() {\n                        update_progress(status_url, nanobar, status_div);\n                    }, 2000);\n                }\n            });\n        }\n        $(function() {\n            $(\'#start-bg-job\').click(start_long_task);\n        });\n    </script>\n  </body>\n</html>\n'"
.gitignore,blob,"b'# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n'"
LICENSE,blob,"b'The MIT License (MIT)\n\nCopyright (c) 2014 Miguel Grinberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the ""Software""), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n'"
README.md,blob,"b'Using Celery with Flask\n=======================\n\nThis repository contains the example code for my blog article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n\nThe application provides two examples of background tasks using Celery:\n\n- Example 1 sends emails asynchronously.\n- Example 2 launches one or more asynchronous jobs and shows progress updates in the web page.\n\nHere is a screenshot of this application:\n\n<center><img src=""http://blog.miguelgrinberg.com/static/images/flask-celery.png""></center>\n\nQuick Setup\n-----------\n\n1. Clone this repository.\n2. Create a virtualenv and install the requirements.\n3. Open a second terminal window and start a local Redis server (if you are on Linux or Mac, execute `run-redis.sh` to install and launch a private copy).\n4. Open a third terminal window. Set two environment variables `MAIL_USERNAME` and `MAIL_PASSWORD` to a valid Gmail account credentials (these will be used to send test emails). Then start a Celery worker: `venv/bin/celery worker -A app.celery --loglevel=info`.\n5. Start the Flask application on your original terminal window: `venv/bin/python app.py`.\n6. Go to `http://localhost:5000/` and enjoy this application!\n\nFor details on how this all works, see my article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n'"
app.py,blob,"b'import os\nimport random\nimport time\nfrom flask import Flask, request, render_template, session, flash, redirect, \\\n    url_for, jsonify\nfrom flask.ext.mail import Mail, Message\nfrom celery import Celery\n\n\napp = Flask(__name__)\napp.config[\'SECRET_KEY\'] = \'top-secret!\'\n\n# Flask-Mail configuration\napp.config[\'MAIL_SERVER\'] = \'smtp.googlemail.com\'\napp.config[\'MAIL_PORT\'] = 587\napp.config[\'MAIL_USE_TLS\'] = True\napp.config[\'MAIL_USERNAME\'] = os.environ.get(\'MAIL_USERNAME\')\napp.config[\'MAIL_PASSWORD\'] = os.environ.get(\'MAIL_PASSWORD\')\napp.config[\'MAIL_DEFAULT_SENDER\'] = \'flask@example.com\'\n\n# Celery configuration\napp.config[\'CELERY_BROKER_URL\'] = \'redis://localhost:6379/0\'\napp.config[\'CELERY_RESULT_BACKEND\'] = \'redis://localhost:6379/0\'\n\n\n# Initialize extensions\nmail = Mail(app)\n\n# Initialize Celery\ncelery = Celery(app.name, broker=app.config[\'CELERY_BROKER_URL\'])\ncelery.conf.update(app.config)\n\n\n@celery.task\ndef send_async_email(msg):\n    """"""Background task to send an email with Flask-Mail.""""""\n    with app.app_context():\n        mail.send(msg)\n\n\n@celery.task(bind=True)\ndef long_task(self):\n    """"""Background task that runs a long function with progress reports.""""""\n    verb = [\'Starting up\', \'Booting\', \'Repairing\', \'Loading\', \'Checking\']\n    adjective = [\'master\', \'radiant\', \'silent\', \'harmonic\', \'fast\']\n    noun = [\'solar array\', \'particle reshaper\', \'cosmic ray\', \'orbiter\', \'bit\']\n    message = \'\'\n    total = random.randint(10, 50)\n    for i in range(total):\n        if not message or random.random() < 0.25:\n            message = \'{0} {1} {2}...\'.format(random.choice(verb),\n                                              random.choice(adjective),\n                                              random.choice(noun))\n        self.update_state(state=\'PROGRESS\',\n                          meta={\'current\': i, \'total\': total,\n                                \'status\': message})\n        time.sleep(1)\n    return {\'current\': 100, \'total\': 100, \'status\': \'Task completed!\',\n            \'result\': 42}\n\n\n@app.route(\'/\', methods=[\'GET\', \'POST\'])\ndef index():\n    if request.method == \'GET\':\n        return render_template(\'index.html\', email=session.get(\'email\', \'\'))\n    email = request.form[\'email\']\n    session[\'email\'] = email\n\n    # send the email\n    msg = Message(\'Hello from Flask\',\n                  recipients=[request.form[\'email\']])\n    msg.body = \'This is a test email sent from a background Celery task.\'\n    if request.form[\'submit\'] == \'Send\':\n        # send right away\n        send_async_email.delay(msg)\n        flash(\'Sending email to {0}\'.format(email))\n    else:\n        # send in one minute\n        send_async_email.apply_async(args=[msg], countdown=60)\n        flash(\'An email will be sent to {0} in one minute\'.format(email))\n\n    return redirect(url_for(\'index\'))\n\n\n@app.route(\'/longtask\', methods=[\'POST\'])\ndef longtask():\n    task = long_task.apply_async()\n    return jsonify({}), 202, {\'Location\': url_for(\'taskstatus\',\n                                                  task_id=task.id)}\n\n\n@app.route(\'/status/<task_id>\')\ndef taskstatus(task_id):\n    task = long_task.AsyncResult(task_id)\n    if task.state == \'PENDING\':\n        response = {\n            \'state\': task.state,\n            \'current\': 0,\n            \'total\': 1,\n            \'status\': \'Pending...\'\n        }\n    elif task.state != \'FAILURE\':\n        response = {\n            \'state\': task.state,\n            \'current\': task.info.get(\'current\', 0),\n            \'total\': task.info.get(\'total\', 1),\n            \'status\': task.info.get(\'status\', \'\')\n        }\n        if \'result\' in task.info:\n            response[\'result\'] = task.info[\'result\']\n    else:\n        # something went wrong in the background job\n        response = {\n            \'state\': task.state,\n            \'current\': 1,\n            \'total\': 1,\n            \'status\': str(task.info),  # this is the exception raised\n        }\n    return jsonify(response)\n\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n'"
requirements.txt,blob,b'Flask==0.10.1\nFlask-Mail==0.9.1\nJinja2==2.7.3\nMarkupSafe==0.23\nWerkzeug==0.9.6\namqp==1.4.6\nanyjson==0.3.3\nargparse==1.2.1\nbilliard==3.3.0.19\nblinker==1.3\ncelery==3.1.17\nitsdangerous==0.24\nkombu==3.0.24\npytz==2014.10\nredis==2.10.3\n'
run-redis.sh,blob,b'#!/bin/bash\nif [ ! -d redis-stable/src ]; then\n    curl -O http://download.redis.io/redis-stable.tar.gz\n    tar xvzf redis-stable.tar.gz\n    rm redis-stable.tar.gz\nfi\ncd redis-stable\nmake\nsrc/redis-server\n'
index.html,blob,"b'<html>\n  <head>\n    <title>Flask + Celery Examples</title>\n    <style>\n        .progress {\n            width: 100%;\n            text-align: center;\n        }\n    </style>\n  </head>\n  <body>\n    <h1>Flask + Celery Examples</h1>\n    <h2>Example 1: Send Asnychronous Email</h2>\n    {% for message in get_flashed_messages() %}\n    <p style=""color: red;"">{{ message }}</p>\n    {% endfor %}\n    <form method=""POST"">\n      <p>Send test email to: <input type=""text"" name=""email"" value=""{{ email }}""></p>\n      <input type=""submit"" name=""submit"" value=""Send"">\n      <input type=""submit"" name=""submit"" value=""Send in 1 minute"">\n    </form>\n    <hr>\n    <h2>Example 2: Long running task with progress updates</h2>\n    <!--<button onclick=""start_long_task();"">Start Long Calculation</button><br><br>-->\n    <button id=""start-bg-job"">Start Long Calculation</button><br><br>\n    <div id=""progress""></div>\n\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/nanobar/0.2.1/nanobar.min.js""></script>\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js""></script>\n    <script>\n        function start_long_task() {\n            // add task status elements\n            div = $(\'<div class=""progress""><div></div><div>0%</div><div>...</div><div>&nbsp;</div></div><hr>\');\n            $(\'#progress\').append(div);\n\n            // create a progress bar\n            var nanobar = new Nanobar({\n                bg: \'#44f\',\n                target: div[0].childNodes[0]\n            });\n\n            // send ajax POST request to start background job\n            $.ajax({\n                type: \'POST\',\n                url: \'/longtask\',\n                success: function(data, status, request) {\n                    status_url = request.getResponseHeader(\'Location\');\n                    update_progress(status_url, nanobar, div[0]);\n                },\n                error: function() {\n                    alert(\'Unexpected error\');\n                }\n            });\n        }\n        function update_progress(status_url, nanobar, status_div) {\n            // send GET request to status URL\n            $.getJSON(status_url, function(data) {\n                // update UI\n                percent = parseInt(data[\'current\'] * 100 / data[\'total\']);\n                nanobar.go(percent);\n                $(status_div.childNodes[1]).text(percent + \'%\');\n                $(status_div.childNodes[2]).text(data[\'status\']);\n                if (data[\'state\'] != \'PENDING\' && data[\'state\'] != \'PROGRESS\') {\n                    if (\'result\' in data) {\n                        // show result\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'result\']);\n                    }\n                    else {\n                        // something unexpected happened\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'state\']);\n                    }\n                }\n                else {\n                    // rerun in 2 seconds\n                    setTimeout(function() {\n                        update_progress(status_url, nanobar, status_div);\n                    }, 2000);\n                }\n            });\n        }\n        $(function() {\n            $(\'#start-bg-job\').click(start_long_task);\n        });\n    </script>\n  </body>\n</html>\n'"
.gitignore,blob,"b'# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n'"
LICENSE,blob,"b'The MIT License (MIT)\n\nCopyright (c) 2014 Miguel Grinberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the ""Software""), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n'"
README.md,blob,"b'Using Celery with Flask\n=======================\n\nThis repository contains the example code for my blog article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n\nQuick Setup\n-----------\n\n1. Clone this repository.\n2. Create a virtualenv and install the requirements.\n3. Open a second terminal window and start a local Redis server (if you are on Linux or Mac, execute `run-redis.sh` to install and launch a private copy).\n4. Open a third terminal window. Set two environment variables `MAIL_USERNAME` and `MAIL_PASSWORD` to a valid Gmail account credentials (these will be used to send test emails). Then start a Celery worker: `venv/bin/celery worker -A app.celery --loglevel=info`.\n5. Start the Flask application on your original terminal window: `venv/bin/python app.py`.\n6. Go to `http://localhost:5000/` and enjoy this application!\n\nFor details on how this all works, see my article [Using Celery with Flask](http://blog.miguelgrinberg.com/post/using-celery-with-flask).\n'"
app.py,blob,"b'import os\nimport random\nimport time\nfrom flask import Flask, request, render_template, session, flash, redirect, \\\n    url_for, jsonify\nfrom flask.ext.mail import Mail, Message\nfrom celery import Celery\n\n\napp = Flask(__name__)\napp.config[\'SECRET_KEY\'] = \'top-secret!\'\n\n# Flask-Mail configuration\napp.config[\'MAIL_SERVER\'] = \'smtp.googlemail.com\'\napp.config[\'MAIL_PORT\'] = 587\napp.config[\'MAIL_USE_TLS\'] = True\napp.config[\'MAIL_USERNAME\'] = os.environ.get(\'MAIL_USERNAME\')\napp.config[\'MAIL_PASSWORD\'] = os.environ.get(\'MAIL_PASSWORD\')\napp.config[\'MAIL_DEFAULT_SENDER\'] = \'flask@example.com\'\n\n# Celery configuration\napp.config[\'CELERY_BROKER_URL\'] = \'redis://localhost:6379/0\'\napp.config[\'CELERY_RESULT_BACKEND\'] = \'redis://localhost:6379/0\'\n\n\n# Initialize extensions\nmail = Mail(app)\n\n# Initialize Celery\ncelery = Celery(app.name, broker=app.config[\'CELERY_BROKER_URL\'])\ncelery.conf.update(app.config)\n\n\n@celery.task\ndef send_async_email(msg):\n    """"""Background task to send an email with Flask-Mail.""""""\n    with app.app_context():\n        mail.send(msg)\n\n\n@celery.task(bind=True)\ndef long_task(self):\n    """"""Background task that runs a long function with progress reports.""""""\n    verb = [\'Starting up\', \'Booting\', \'Repairing\', \'Loading\', \'Checking\']\n    adjective = [\'master\', \'radiant\', \'silent\', \'harmonic\', \'fast\']\n    noun = [\'solar array\', \'particle reshaper\', \'cosmic ray\', \'orbiter\', \'bit\']\n    message = \'\'\n    total = random.randint(10, 50)\n    for i in range(total):\n        if not message or random.random() < 0.25:\n            message = \'{0} {1} {2}...\'.format(random.choice(verb),\n                                              random.choice(adjective),\n                                              random.choice(noun))\n        self.update_state(state=\'PROGRESS\',\n                          meta={\'current\': i, \'total\': total,\n                                \'status\': message})\n        time.sleep(1)\n    return {\'current\': 100, \'total\': 100, \'status\': \'Task completed!\',\n            \'result\': 42}\n\n\n@app.route(\'/\', methods=[\'GET\', \'POST\'])\ndef index():\n    if request.method == \'GET\':\n        return render_template(\'index.html\', email=session.get(\'email\', \'\'))\n    email = request.form[\'email\']\n    session[\'email\'] = email\n\n    # send the email\n    msg = Message(\'Hello from Flask\',\n                  recipients=[request.form[\'email\']])\n    msg.body = \'This is a test email sent from a background Celery task.\'\n    if request.form[\'submit\'] == \'Send\':\n        # send right away\n        send_async_email.delay(msg)\n        flash(\'Sending email to {0}\'.format(email))\n    else:\n        # send in one minute\n        send_async_email.apply_async(args=[msg], countdown=60)\n        flash(\'An email will be sent to {0} in one minute\'.format(email))\n\n    return redirect(url_for(\'index\'))\n\n\n@app.route(\'/longtask\', methods=[\'POST\'])\ndef longtask():\n    task = long_task.apply_async()\n    return jsonify({}), 202, {\'Location\': url_for(\'taskstatus\',\n                                                  task_id=task.id)}\n\n\n@app.route(\'/status/<task_id>\')\ndef taskstatus(task_id):\n    task = long_task.AsyncResult(task_id)\n    if task.state == \'PENDING\':\n        response = {\n            \'state\': task.state,\n            \'current\': 0,\n            \'total\': 1,\n            \'status\': \'Pending...\'\n        }\n    elif task.state != \'FAILURE\':\n        response = {\n            \'state\': task.state,\n            \'current\': task.info.get(\'current\', 0),\n            \'total\': task.info.get(\'total\', 1),\n            \'status\': task.info.get(\'status\', \'\')\n        }\n        if \'result\' in task.info:\n            response[\'result\'] = task.info[\'result\']\n    else:\n        # something went wrong in the background job\n        response = {\n            \'state\': task.state,\n            \'current\': 1,\n            \'total\': 1,\n            \'status\': str(task.info),  # this is the exception raised\n        }\n    return jsonify(response)\n\n\nif __name__ == \'__main__\':\n    app.run(debug=True)\n'"
requirements.txt,blob,b'Flask==0.10.1\nFlask-Mail==0.9.1\nJinja2==2.7.3\nMarkupSafe==0.23\nWerkzeug==0.9.6\namqp==1.4.6\nanyjson==0.3.3\nargparse==1.2.1\nbilliard==3.3.0.19\nblinker==1.3\ncelery==3.1.17\nitsdangerous==0.24\nkombu==3.0.24\npytz==2014.10\nredis==2.10.3\n'
run-redis.sh,blob,b'#!/bin/bash\nif [ ! -d redis-stable/src ]; then\n    curl -O http://download.redis.io/redis-stable.tar.gz\n    tar xvzf redis-stable.tar.gz\n    rm redis-stable.tar.gz\nfi\ncd redis-stable\nmake\nsrc/redis-server\n'
index.html,blob,"b'<html>\n  <head>\n    <title>Flask + Celery Examples</title>\n    <style>\n        .progress {\n            width: 100%;\n            text-align: center;\n        }\n    </style>\n  </head>\n  <body>\n    <h1>Flask + Celery Examples</h1>\n    <h2>Example 1: Send Asnychronous Email</h2>\n    {% for message in get_flashed_messages() %}\n    <p style=""color: red;"">{{ message }}</p>\n    {% endfor %}\n    <form method=""POST"">\n      <p>Send test email to: <input type=""text"" name=""email"" value=""{{ email }}""></p>\n      <input type=""submit"" name=""submit"" value=""Send"">\n      <input type=""submit"" name=""submit"" value=""Send in 1 minute"">\n    </form>\n    <hr>\n    <h2>Example 2: Long running task with progress updates</h2>\n    <!--<button onclick=""start_long_task();"">Start Long Calculation</button><br><br>-->\n    <button id=""start-bg-job"">Start Long Calculation</button><br><br>\n    <div id=""progress""></div>\n\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/nanobar/0.2.1/nanobar.min.js""></script>\n    <script src=""//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js""></script>\n    <script>\n        function start_long_task() {\n            // add task status elements\n            div = $(\'<div class=""progress""><div></div><div>0%</div><div>...</div><div>&nbsp;</div></div><hr>\');\n            $(\'#progress\').append(div);\n\n            // create a progress bar\n            var nanobar = new Nanobar({\n                bg: \'#44f\',\n                target: div[0].childNodes[0]\n            });\n\n            // send ajax POST request to start background job\n            $.ajax({\n                type: \'POST\',\n                url: \'/longtask\',\n                success: function(data, status, request) {\n                    status_url = request.getResponseHeader(\'Location\');\n                    update_progress(status_url, nanobar, div[0]);\n                },\n                error: function() {\n                    alert(\'Unexpected error\');\n                }\n            });\n        }\n        function update_progress(status_url, nanobar, status_div) {\n            // send GET request to status URL\n            $.getJSON(status_url, function(data) {\n                // update UI\n                percent = parseInt(data[\'current\'] * 100 / data[\'total\']);\n                nanobar.go(percent);\n                $(status_div.childNodes[1]).text(percent + \'%\');\n                $(status_div.childNodes[2]).text(data[\'status\']);\n                if (data[\'state\'] != \'PENDING\' && data[\'state\'] != \'PROGRESS\') {\n                    if (\'result\' in data) {\n                        // show result\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'result\']);\n                    }\n                    else {\n                        // something unexpected happened\n                        $(status_div.childNodes[3]).text(\'Result: \' + data[\'state\']);\n                    }\n                }\n                else {\n                    // rerun in 2 seconds\n                    setTimeout(function() {\n                        update_progress(status_url, nanobar, status_div);\n                    }, 2000);\n                }\n            });\n        }\n        $(function() {\n            $(\'#start-bg-job\').click(start_long_task);\n        });\n    </script>\n  </body>\n</html>\n'"
.gitignore,blob,"b'# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nenv/\nbuild/\ndevelop-eggs/\ndist/\ndownloads/\neggs/\nlib/\nlib64/\nparts/\nsdist/\nvar/\n*.egg-info/\n.installed.cfg\n*.egg\n\n# PyInstaller\n#  Usually these files are written by a python script from a template\n#  before PyInstaller builds the exe, so as to inject date/other infos into it.\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.cache\nnosetests.xml\ncoverage.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n'"
LICENSE,blob,"b'The MIT License (MIT)\n\nCopyright (c) 2014 Miguel Grinberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the ""Software""), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n'"
README.md,blob,b'flask-celery-example\n====================\n'
